// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using library_automation;

#nullable disable

namespace library_automation.Migrations
{
    [DbContext(typeof(dbContext))]
    [Migration("20240802133340_libraryDB")]
    partial class libraryDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("library_automation.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Jane",
                            LastName = "Austen",
                            Phone = "555-123-4567"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Charles",
                            LastName = "Dickens",
                            Phone = "555-987-6543"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Mark",
                            LastName = "Twain",
                            Phone = "555-555-5555"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Emily",
                            LastName = "Brontë",
                            Phone = "555-246-8101"
                        },
                        new
                        {
                            Id = 5,
                            FirstName = "Leo",
                            LastName = "Tolstoy",
                            Phone = "555-314-1592"
                        });
                });

            modelBuilder.Entity("library_automation.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublicationYear")
                        .HasColumnType("datetime2");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Genre = "Classic",
                            PublicationYear = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "DoguBatı",
                            Title = "Crime and Punishment"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            Genre = "Fiction",
                            PublicationYear = new DateTime(2005, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Penguin",
                            Title = "The Great Gatsby"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            Genre = "Classic",
                            PublicationYear = new DateTime(2012, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "HarperCollins",
                            Title = "To Kill a Mockingbird"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 4,
                            Genre = "Dystopian",
                            PublicationYear = new DateTime(2009, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Vintage",
                            Title = "1984"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 5,
                            Genre = "Romance",
                            PublicationYear = new DateTime(2018, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Barnes & Noble",
                            Title = "Pride and Prejudice"
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 5,
                            Genre = "Coming of Age",
                            PublicationYear = new DateTime(2014, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Simon & Schuster",
                            Title = "The Catcher in the Rye"
                        });
                });

            modelBuilder.Entity("library_automation.Models.Loan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LoanDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookId")
                        .IsUnique();

                    b.HasIndex("MemberId");

                    b.ToTable("Loans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            LoanDate = new DateTime(2024, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MemberId = 1,
                            ReturnDate = new DateTime(2024, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            LoanDate = new DateTime(2024, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MemberId = 1,
                            ReturnDate = new DateTime(2024, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("library_automation.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "USA",
                            Email = "john@gmail.com",
                            Name = "John",
                            Phone = "05435436347"
                        });
                });

            modelBuilder.Entity("library_automation.Models.Book", b =>
                {
                    b.HasOne("library_automation.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("library_automation.Models.Loan", b =>
                {
                    b.HasOne("library_automation.Models.Book", "Book")
                        .WithOne("Loan")
                        .HasForeignKey("library_automation.Models.Loan", "BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("library_automation.Models.Member", "Member")
                        .WithMany("Loans")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("library_automation.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("library_automation.Models.Book", b =>
                {
                    b.Navigation("Loan")
                        .IsRequired();
                });

            modelBuilder.Entity("library_automation.Models.Member", b =>
                {
                    b.Navigation("Loans");
                });
#pragma warning restore 612, 618
        }
    }
}
